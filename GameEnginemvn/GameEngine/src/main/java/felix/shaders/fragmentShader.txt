#version 150

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void){
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);
    float nDotl = dot(unitNormal,unitLightVector);
    float brightness = max(nDotl,0.2);
    vec3 diffuse = brightness * lightColour;

    vec3 unitVectorToCamera = normalize(toCameraVector);
    vec3 lightDirection = -unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);

    float lesklost = dot(reflectedLightDirection,unitVectorToCamera);
    lesklost = max(lesklost,0.2);
    float damperF = pow(lesklost,shineDamper);
    vec3 finalSpecular = damperF*lightColour*reflectivity;
    vec4 textureColour =texture(modelTexture,pass_textureCoordinates);
    if(textureColour.a<0.5){
        discard;
    }

	out_Color = vec4(diffuse,1.0) * texture(modelTexture,pass_textureCoordinates)+vec4(finalSpecular,1.0);
    out_Color = mix(vec4(skyColour,1.0),out_Color, visibility);

}
